[
  {
    "path": "app/__init__.py",
    "size": 0,
    "preview": ""
  },
  {
    "path": "app/main.py",
    "size": 451,
    "preview": "from fastapi import FastAPI\nfrom app.routers.prices import router as prices_router\nfrom app.routers.summary import router as summary_router\nfrom app.routers.portfolio import router as portfolio_router\n\napp = FastAPI(title=\"AiRi Erobook Server\")\n\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"💕아이리 서버 작동 중이에요!💕\"}\n\napp.include_router(prices_router)\napp.include_router(summary_router)\napp.include_router(portfolio_router)"
  },
  {
    "path": "app/core/__init__.py",
    "size": 0,
    "preview": ""
  },
  {
    "path": "app/core/auth.py",
    "size": 542,
    "preview": "from fastapi import Header, HTTPException\nfrom app.core.config import TOKEN\n\ndef require_auth(authorization: str | None = Header(None)) -> None:\n    if not authorization:\n        authorization = f\"Bearer {TOKEN}\"\n    if not authorization.startswith(\"Bearer \"):\n        raise HTTPException(status_code=401, detail=\"Authorization 형식이 잘못되었습니다. (Bearer ...)\")\n    token = authorization.split(\" \", 1)[1].strip()\n    if token != TOKEN:\n        raise HTTPException(status_code=403, detail=\"토큰이 올바르지 않습니다.\")"
  },
  {
    "path": "app/core/config.py",
    "size": 109,
    "preview": "DEFAULT_TICKERS = [\"IREN\", \"GOOG\", \"NVDA\", \"EL\", \"UNH\", \"CRDO\", \"TSLQ\", \"TSMX\"]\nTOKEN = \"Oppaiboingboing123\""
  },
  {
    "path": "app/routers/__init__.py",
    "size": 0,
    "preview": ""
  },
  {
    "path": "app/routers/portfolio.py",
    "size": 24315,
    "preview": "\n# app/routers/portfolio.py\nfrom fastapi import APIRouter, Form, Request\nfrom fastapi.responses import HTMLResponse, RedirectResponse\nimport os, json, re\nimport requests\nfrom urllib.parse import quote_plus\n\nrouter = APIRouter()\n\nJS_SUGGEST_SAFE = \"\"\"\n<script>\nfunction debounce(fn, ms){var t; return function(){ var args=arguments; clearTimeout(t); t=setTimeout(function(){ fn.apply(null, args); }, ms); }; }\nvar input=document.getElementById('name-input');\nvar suggest=document.getElementById('suggest');\nvar form=document.getElementById('add-form');\nvar hiddenTicker=document.getElementById('ticker-hidden');\n\nfunction render(items){\n  if(!items || !items.length){ suggest.style.display='none'; suggest.innerHTML=''; return; }\n  var html='';\n  for(var i=0;i<items.length;i++){\n    var it=items[i];\n    html += \"<div class='suggest-item' data-ticker='\"+it.ticker+\"' title='\"+(it.longname||\"\")+\"'>\"\n          + \"<span>\"+(it.display||it.ticker)+\"</span>\"\n          + \"<span class='badge'>\"+(it.exch||\"\")+\"</span>\"\n          + \"</div>\";\n  }\n  suggest.innerHTML=html;\n  suggest.style.display='block';\n  var elems=suggest.querySelectorAll('.suggest-item');\n  for(var j=0;j<elems.length;j++){\n    elems[j].addEventListener('click', function(e){\n      var tk=this.getAttribute('data-ticker');\n      hiddenTicker.value=tk;\n      form.setAttribute('action','/portfolio-editor/add-confirm');\n      form.submit();\n    });\n  }\n}\n\nvar fetchSuggest = debounce(function(q){\n  q=(q||'').trim();\n  if(!q){ render([]); return; }\n  fetch('/api/symbol-suggest?name=' + encodeURIComponent(q))\n    .then(function(resp){ return resp.json(); })\n    .then(function(data){ render(data.items||[]); })\n    .catch(function(e){});\n}, 180);\n\ninput.addEventListener('input', function(e){\n  hiddenTicker.value='';\n  form.setAttribute('action','/portfolio-editor/add');\n  fetchSuggest(e.target.value);\n});\n\ninput.addEventListener('keydown', function(e){\n  if(e.key===','){ setTimeout(function(){ fetchSuggest(input.value); }, 0); }\n});\n"
  },
  {
    "path": "app/routers/prices.py",
    "size": 2524,
    "preview": "from fastapi import APIRouter, Query, Header\nfrom fastapi.responses import HTMLResponse, PlainTextResponse\nfrom typing import List, Optional, Dict, Any\nfrom datetime import datetime, timezone\nimport pandas as pd, yfinance as yf\n\nfrom app.core.auth import require_auth\nfrom app.core.config import DEFAULT_TICKERS\nfrom app.services.market import (\n    fetch_last_change_pct, get_usdkrw, build_price_row, format_krw_compact\n)\n\nrouter = APIRouter()\n\n@router.get(\"/prices_table-html\", response_class=HTMLResponse)\ndef prices_table_html(tickers: Optional[str] = None, authorization: str | None = Header(None)):\n    require_auth(authorization)\n    usdkrw = get_usdkrw()\n    syms = [t.strip().upper() for t in tickers.split(\",\")] if tickers else DEFAULT_TICKERS[:]\n    rows = [build_price_row(sym, usdkrw) for sym in syms]\n    def money_usd(x, d=2): return \"-\" if x is None else f\"${x:,.{d}f}\"\n    def pct(x, d=2): return \"-\" if x is None else f\"{x:.{d}f}%\"\n    html = [\"\"\"<html><head><meta charset='utf-8'><style>\n      body{font-family:system-ui,Arial;max-width:980px;margin:24px auto;padding:0 16px;}\n      table{border-collapse:collapse;width:100%;}\n      th,td{border:1px solid #e6e6e6;padding:8px 10px;text-align:right;font-size:14px;}\n      th{text-align:center;background:#f6f8fa;}\n      td:first-child, th:first-child {text-align:left;}\n      .pos{color:#d33;} .neg{color:#06c;} tr:hover td{background:#fafafa;}\n    </style></head><body>\"\"\"]\n    html.append(f\"<h2>가격 테이블</h2><p>USD/KRW 환율: <b>{usdkrw:,.2f}원</b></p>\")\n    html.append(\"<table><thead><tr>\")\n    for h in [\"종목명\",\"티커\",\"현재가(원)\",\"현재가($)\",\"등락률(%)\",\"거래대금(원)\",\"종가(원)\",\"종가($)\"]:\n        html.append(f\"<th>{h}</th>\")\n    html.append(\"</tr></thead><tbody>\")\n    for r in rows:\n        cls = \"pos\" if (r.get(\"change_pct\") and r[\"change_pct\"] >= 0) else \"neg\"\n        html.append(\"<tr>\")\n        html.append(f\"<td>{r['name']}</td><td>{r['ticker']}</td>\")\n        html.append(f\"<td>{format_krw_compact(r['current_price_krw'])}</td>\")\n        html.append(f\"<td>{money_usd(r['current_price_usd'],2)}</td>\")\n        html.append(f\"<td class='{cls}'>{pct(r.get('change_pct'),2)}</td>\")\n        html.append(f\"<td>{format_krw_compact(r['turnover_krw'])}</td>\")\n        html.append(f\"<td>{format_krw_compact(r['close_krw'])}</td>\")\n        html.append(f\"<td>{money_usd(r['close_usd'],2)}</td>\")\n        html.append(\"</tr>\")\n    html.append(\"</tbody></table></body></html>\")\n    return HTMLResponse(\"\".join(html))"
  },
  {
    "path": "app/routers/summary.py",
    "size": 1366,
    "preview": "from fastapi import APIRouter, Query, Header\nfrom fastapi.responses import PlainTextResponse, HTMLResponse\nfrom typing import Optional, List\nfrom datetime import datetime, timezone\nfrom markdown import markdown\nfrom app.core.auth import require_auth\nfrom app.core.config import DEFAULT_TICKERS\nfrom app.services.market import fetch_last_change_pct\n\nrouter = APIRouter()\n\n@router.get(\"/daily-summary-html\", response_class=HTMLResponse)\ndef daily_summary_html(tickers: Optional[str] = Query(None), authorization: str | None = Header(None)):\n    require_auth(authorization)\n    syms = [t.strip().upper() for t in tickers.split(\",\") if t.strip()] if tickers else DEFAULT_TICKERS[:]\n    rows = [fetch_last_change_pct(sym) for sym in syms]\n    asof = datetime.now(timezone.utc).isoformat()\n    md = [f\"### 📊 Daily Summary (UTC: {asof})\"]\n    for r in rows:\n        if \"error\" in r: md.append(f\"- {r['ticker']}: 오류 — {r['error']}\")\n        else:\n            pct, last, prev = r.get(\"change_pct\"), r.get(\"close\"), r.get(\"prev_close\")\n            if pct is None: md.append(f\"- {r['ticker']}: 데이터 부족\")\n            else:\n                sign = \"+\" if pct >= 0 else \"\"\n                md.append(f\"- {r['ticker']}: {sign}{pct}% (어제 {prev} → 오늘 {last})\")\n    html = markdown(\"\\n\".join(md))\n    return HTMLResponse(f\"<html><body>{html}</body></html>\")"
  },
  {
    "path": "app/services/__init__.py",
    "size": 0,
    "preview": ""
  },
  {
    "path": "app/services/market.py",
    "size": 2682,
    "preview": "from typing import Dict, Any\nimport yfinance as yf\n\ndef get_usdkrw() -> float:\n    try:\n        fx = yf.Ticker(\"KRW=X\").history(period=\"5d\", interval=\"1d\")\n        return float(fx[\"Close\"].dropna().iloc[-1])\n    except Exception:\n        return 1350.0\n\ndef fetch_last_change_pct(sym: str) -> Dict[str, Any]:\n    try:\n        hist = yf.Ticker(sym).history(period=\"7d\", interval=\"1d\", auto_adjust=False)\n        closes = hist[\"Close\"].dropna().tolist()\n        if len(closes) >= 2:\n            _last, _prev = float(closes[-1]), float(closes[-2])\n            change_pct = round(((_last - _prev) / _prev) * 100, 4) if _prev != 0 else None\n            return {\"ticker\": sym, \"close\": round(_last,2), \"prev_close\": round(_prev,2), \"change_pct\": change_pct}\n        elif len(closes) == 1:\n            return {\"ticker\": sym, \"close\": round(float(closes[-1]),2), \"prev_close\": None, \"change_pct\": None}\n        return {\"ticker\": sym, \"error\": \"종가 데이터 없음(휴장/상장 이슈 가능)\"}\n    except Exception as e:\n        return {\"ticker\": sym, \"error\": str(e)}\n\ndef build_price_row(sym: str, usdkrw: float) -> Dict[str, Any]:\n    base = fetch_last_change_pct(sym)\n    name = sym\n    try:\n        tkr = yf.Ticker(sym)\n        fi = tkr.fast_info\n        if isinstance(fi, dict) and fi.get(\"shortName\"):\n            name = fi[\"shortName\"]\n        else:\n            info = tkr.info\n            if isinstance(info, dict) and info.get(\"shortName\"):\n                name = info[\"shortName\"]\n    except Exception:\n        pass\n    volume = None\n    try:\n        h = yf.Ticker(sym).history(period=\"7d\", interval=\"1d\", auto_adjust=False)\n        volume = int(h[\"Volume\"].dropna().iloc[-1])\n    except Exception:\n        volume = None\n    last_usd = base.get(\"close\")\n    prev_usd = base.get(\"prev_close\")\n    last_krw = round(last_usd * usdkrw) if last_usd is not None else None\n    prev_krw = round(prev_usd * usdkrw) if prev_usd is not None else None\n    turnover_krw = round(last_usd * volume * usdkrw) if (last_usd is not None and volume is not None) else None\n    return {\n        \"name\": name, \"ticker\": sym,\n        \"current_price_krw\": last_krw, \"current_price_usd\": last_usd,\n        \"change_pct\": base.get(\"change_pct\"),\n        \"turnover_krw\": turnover_krw,\n        \"close_krw\": prev_krw, \"close_usd\": prev_usd,\n        \"volume\": volume, \"raw\": base\n    }\n\ndef format_krw_compact(x) -> str:\n    if x is None: return \"-\""
  }
]